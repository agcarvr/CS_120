# -*- coding: utf-8 -*-
"""Complex.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wKrwYrh7yTvemZzKG9dOx_n2MtTWCoTW
"""

'''
Functions for dealing with Complex Numbers as tuples
'''

def add(z1, z2):
    '''
    Add two complex numbers
    '''
    return z1[0] + z2[0], z1[1] + z2[1]

def neg(z):
    '''
    Take the negative of a complex number
    '''
    return -z[0], -z[1]
    
def prod(z1, z2):
    '''
    Take the product of two complex numbers
    '''
    return (z1[0] * z2[0] - z1[1]*z2[1]), (z1[0]*z2[1] + z1[1] * z2[0])

def mag(z):
    '''
    Find the magnitude of a complex number
    '''
    from numpy import sqrt
    return sqrt(z[0]**2 + z[1]**2)

def conj(z):
    '''
    Give the complex conjugate of a complex number
    '''
    return z[0], -z[1]

def div(z1, z2):
    '''Take the ratio of two complex numbers'''
    
    w = prod(z1, conj(z2))
    r2 = mag(z2)**2
    
    return w[0]/r2, w[1]/r2

def power(z, n):
    
    if n==1:
        return z
    else:
        return prod(z, power(z, n-1))

def e(S, x):
    
    num = add(S, neg(power(x, 2)))
    den = prod( (2, 0), x)
    
    return div(num, den)

def sqrt(S, x):
    
    count = 0
    er = e(S, x)
    while (mag(er)> 10**-15) and (count < 20):
        x = add(x, er)
        er = e(S, x)
        count += 1
        
    return x, mag(er), count

sqrt( (-1, 0), (1, 1) )

